<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="devs" nsURI="http://www.example.org/devs" nsPrefix="devs">
  <eAnnotations source="http://www.eclipse.org/OCL/Import">
    <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
    <details key="ecore.xml.type" value="http://www.eclipse.org/emf/2003/XMLType"/>
  </eAnnotations>
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="AtomicDevs">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="definitionMustNotHaveValue stateMustHaveValue stateMustMatchDefinition uniqueDefinitionDescriptorNames"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="definitionMustNotHaveValue" value="&#xA;&#x9;&#x9;&#x9;self.definition.descriptor -> &#xA;&#x9;&#x9;&#x9;forAll(d : Descriptor | d.value.content.oclIsUndefined())"/>
      <details key="stateMustHaveValue" value="&#xA;&#x9;&#x9;&#x9;self.state -> &#xA;&#x9;&#x9;&#x9;forAll( s: State | s.descriptor ->&#xA;&#x9;&#x9;&#x9;&#x9;forAll(d: Descriptor | not d.value.content.oclIsUndefined()))"/>
      <details key="stateMustMatchDefinition" value="&#xA;&#x9;&#x9;&#x9;self.definition.descriptor ->&#xA;&#x9;&#x9;&#x9;&#x9;forAll(d1: Descriptor | self.state ->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;forAll(s: State | s.descriptor ->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;one(d2: Descriptor | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;d1.name = d2.name and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;d1.nature = d2.nature and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; d1.type = d2.type)))"/>
      <details key="uniqueDefinitionDescriptorNames" value="&#xA;&#x9;&#x9;&#x9;self.definition.descriptor -> &#xA;&#x9;&#x9;&#x9;&#x9;forAll(d1: Descriptor | self.definition.descriptor ->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;one(d2: Descriptor | d1.name = d2.name))"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="state" lowerBound="1" upperBound="-1"
        eType="#//State" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="definition" eType="#//State"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="State">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="compulsoryPhase compulsorySigma"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="compulsoryPhase" value="self.descriptor->one(e:Descriptor|e.nature = DescriptorNature::PHASE)"/>
      <details key="compulsorySigma" value="self.descriptor->one(e:Descriptor|e.nature = DescriptorNature::SIGMA)"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="descriptor" lowerBound="2"
        upperBound="-1" eType="#//Descriptor" containment="true" eOpposite="#//Descriptor/state"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="devs" eType="#//AtomicDevs"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="transitionIn" upperBound="-1"
        eType="#//InternalTransition" eOpposite="#//InternalTransition/targetState"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="transitionOut" upperBound="-1"
        eType="#//InternalTransition" eOpposite="#//InternalTransition/sourceState"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Descriptor">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="phaseDescriptor sigmaDescriptor"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="phaseDescriptor" value="&#xA;&#x9;&#x9;&#x9;self.nature = DescriptorNature::PHASE&#xA;&#x9;&#x9;&#x9;implies (self.name = 'Phase' &#xA;&#x9;&#x9;&#x9;&#x9;and self.type.oclAsType(PrimitiveType).primitive = Primitive::DOUBLE)"/>
      <details key="sigmaDescriptor" value="&#xA;&#x9;&#x9;&#x9;self.nature = DescriptorNature::SIGMA&#xA;&#x9;&#x9;&#x9;implies (self.name = 'Sigma' &#xA;&#x9;&#x9;&#x9;&#x9;and self.type.oclAsType(PrimitiveType).primitive = Primitive::STRING)"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="state" lowerBound="1" eType="#//State"
        eOpposite="#//State/descriptor"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="nature" lowerBound="1"
        eType="#//DescriptorNature" defaultValueLiteral="CUSTOM"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//Type"
        containment="true" eOpposite="#//Type/descriptor"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//Value"
        containment="true" eOpposite="#//Value/descriptor"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="descriptor" lowerBound="1"
        eType="#//Descriptor" eOpposite="#//Descriptor/type"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="#//Type">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="primitive" lowerBound="1"
        eType="#//Primitive"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UserDefinedType" eSuperTypes="#//Type">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="Primitive">
    <eLiterals name="INTEGER"/>
    <eLiterals name="DOUBLE" value="1"/>
    <eLiterals name="STRING" value="3"/>
    <eLiterals name="BOOLEAN" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Value">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="primitiveValueMatches"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="primitiveValueMatches" value="&#xA;&#x9;&#x9;&#x9;(toBeDefined = false) implies &#xA;&#x9;&#x9;&#x9;(self.descriptor.type.oclIsTypeOf(PrimitiveType)&#xA;&#x9;&#x9;&#x9;&#x9;and (self.descriptor.type.oclAsType(PrimitiveType).primitive = Primitive::INTEGER implies (self.content.oclIsTypeOf(Integer)))&#xA;&#x9;&#x9;&#x9;&#x9;and (self.descriptor.type.oclAsType(PrimitiveType).primitive = Primitive::DOUBLE implies (self.content.oclIsTypeOf(Real)))&#xA;&#x9;&#x9;&#x9;&#x9;and (self.descriptor.type.oclAsType(PrimitiveType).primitive = Primitive::STRING implies (self.content.oclIsTypeOf(String)))&#xA;&#x9;&#x9;&#x9;&#x9;and (self.descriptor.type.oclAsType(PrimitiveType).primitive = Primitive::BOOLEAN implies (self.content.oclIsTypeOf(Boolean)))&#xA;&#x9;&#x9;&#x9;)"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="toBeDefined" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="content" eType="ecore:EDataType http://www.eclipse.org/emf/2003/XMLType#//AnySimpleType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="descriptor" lowerBound="1"
        eType="#//Descriptor" eOpposite="#//Descriptor/value"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="DescriptorNature">
    <eLiterals name="PHASE"/>
    <eLiterals name="SIGMA" value="1"/>
    <eLiterals name="CUSTOM" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InternalTransition">
    <eStructuralFeatures xsi:type="ecore:EReference" name="targetState" lowerBound="1"
        eType="#//State" eOpposite="#//State/transitionIn"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceState" lowerBound="1"
        eType="#//State" eOpposite="#//State/transitionOut"/>
  </eClassifiers>
</ecore:EPackage>
