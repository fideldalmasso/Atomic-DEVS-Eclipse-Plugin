/**
 */
package atomicDevs.provider;

import atomicDevs.util.AtomicDevsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AtomicDevsItemProviderAdapterFactory extends AtomicDevsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AtomicDevsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.AtomicDEVS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicDEVSItemProvider atomicDEVSItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.AtomicDEVS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicDEVSAdapter() {
		if (atomicDEVSItemProvider == null) {
			atomicDEVSItemProvider = new AtomicDEVSItemProvider(this);
		}

		return atomicDEVSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.StateStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateStructureItemProvider stateStructureItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.StateStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateStructureAdapter() {
		if (stateStructureItemProvider == null) {
			stateStructureItemProvider = new StateStructureItemProvider(this);
		}

		return stateStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.PhaseVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhaseVariableItemProvider phaseVariableItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.PhaseVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhaseVariableAdapter() {
		if (phaseVariableItemProvider == null) {
			phaseVariableItemProvider = new PhaseVariableItemProvider(this);
		}

		return phaseVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.SigmaVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SigmaVariableItemProvider sigmaVariableItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.SigmaVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSigmaVariableAdapter() {
		if (sigmaVariableItemProvider == null) {
			sigmaVariableItemProvider = new SigmaVariableItemProvider(this);
		}

		return sigmaVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.CustomVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomVariableItemProvider customVariableItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.CustomVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomVariableAdapter() {
		if (customVariableItemProvider == null) {
			customVariableItemProvider = new CustomVariableItemProvider(this);
		}

		return customVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.StatePhase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatePhaseItemProvider statePhaseItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.StatePhase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatePhaseAdapter() {
		if (statePhaseItemProvider == null) {
			statePhaseItemProvider = new StatePhaseItemProvider(this);
		}

		return statePhaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.PrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveTypeItemProvider primitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.PrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveTypeAdapter() {
		if (primitiveTypeItemProvider == null) {
			primitiveTypeItemProvider = new PrimitiveTypeItemProvider(this);
		}

		return primitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.UserDefinedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDefinedTypeItemProvider userDefinedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.UserDefinedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDefinedTypeAdapter() {
		if (userDefinedTypeItemProvider == null) {
			userDefinedTypeItemProvider = new UserDefinedTypeItemProvider(this);
		}

		return userDefinedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.InternalTransitionData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalTransitionDataItemProvider internalTransitionDataItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.InternalTransitionData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalTransitionDataAdapter() {
		if (internalTransitionDataItemProvider == null) {
			internalTransitionDataItemProvider = new InternalTransitionDataItemProvider(this);
		}

		return internalTransitionDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.InitialState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialStateItemProvider initialStateItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.InitialState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialStateAdapter() {
		if (initialStateItemProvider == null) {
			initialStateItemProvider = new InitialStateItemProvider(this);
		}

		return initialStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.StateDouble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateDoubleItemProvider stateDoubleItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.StateDouble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateDoubleAdapter() {
		if (stateDoubleItemProvider == null) {
			stateDoubleItemProvider = new StateDoubleItemProvider(this);
		}

		return stateDoubleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.StateString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateStringItemProvider stateStringItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.StateString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateStringAdapter() {
		if (stateStringItemProvider == null) {
			stateStringItemProvider = new StateStringItemProvider(this);
		}

		return stateStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.StateBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateBooleanItemProvider stateBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.StateBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateBooleanAdapter() {
		if (stateBooleanItemProvider == null) {
			stateBooleanItemProvider = new StateBooleanItemProvider(this);
		}

		return stateBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.StateUserDefined} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateUserDefinedItemProvider stateUserDefinedItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.StateUserDefined}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateUserDefinedAdapter() {
		if (stateUserDefinedItemProvider == null) {
			stateUserDefinedItemProvider = new StateUserDefinedItemProvider(this);
		}

		return stateUserDefinedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.StateInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateIntegerItemProvider stateIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.StateInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateIntegerAdapter() {
		if (stateIntegerItemProvider == null) {
			stateIntegerItemProvider = new StateIntegerItemProvider(this);
		}

		return stateIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.Infinity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfinityItemProvider infinityItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.Infinity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfinityAdapter() {
		if (infinityItemProvider == null) {
			infinityItemProvider = new InfinityItemProvider(this);
		}

		return infinityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.InternalTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalTransitionItemProvider internalTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.InternalTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalTransitionAdapter() {
		if (internalTransitionItemProvider == null) {
			internalTransitionItemProvider = new InternalTransitionItemProvider(this);
		}

		return internalTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ExternalTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalTransitionItemProvider externalTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ExternalTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalTransitionAdapter() {
		if (externalTransitionItemProvider == null) {
			externalTransitionItemProvider = new ExternalTransitionItemProvider(this);
		}

		return externalTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ExternalTransitionData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalTransitionDataItemProvider externalTransitionDataItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ExternalTransitionData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalTransitionDataAdapter() {
		if (externalTransitionDataItemProvider == null) {
			externalTransitionDataItemProvider = new ExternalTransitionDataItemProvider(this);
		}

		return externalTransitionDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.OutputPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputPortItemProvider outputPortItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.OutputPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputPortAdapter() {
		if (outputPortItemProvider == null) {
			outputPortItemProvider = new OutputPortItemProvider(this);
		}

		return outputPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.InputPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputPortItemProvider inputPortItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.InputPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputPortAdapter() {
		if (inputPortItemProvider == null) {
			inputPortItemProvider = new InputPortItemProvider(this);
		}

		return inputPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ValueData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueDataItemProvider valueDataItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ValueData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueDataAdapter() {
		if (valueDataItemProvider == null) {
			valueDataItemProvider = new ValueDataItemProvider(this);
		}

		return valueDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.InitialDot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialDotItemProvider initialDotItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.InitialDot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialDotAdapter() {
		if (initialDotItemProvider == null) {
			initialDotItemProvider = new InitialDotItemProvider(this);
		}

		return initialDotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ParameterUserDefined} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterUserDefinedItemProvider parameterUserDefinedItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ParameterUserDefined}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterUserDefinedAdapter() {
		if (parameterUserDefinedItemProvider == null) {
			parameterUserDefinedItemProvider = new ParameterUserDefinedItemProvider(this);
		}

		return parameterUserDefinedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ParameterInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterIntegerItemProvider parameterIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ParameterInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterIntegerAdapter() {
		if (parameterIntegerItemProvider == null) {
			parameterIntegerItemProvider = new ParameterIntegerItemProvider(this);
		}

		return parameterIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ParameterDouble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterDoubleItemProvider parameterDoubleItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ParameterDouble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterDoubleAdapter() {
		if (parameterDoubleItemProvider == null) {
			parameterDoubleItemProvider = new ParameterDoubleItemProvider(this);
		}

		return parameterDoubleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ParameterString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterStringItemProvider parameterStringItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ParameterString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterStringAdapter() {
		if (parameterStringItemProvider == null) {
			parameterStringItemProvider = new ParameterStringItemProvider(this);
		}

		return parameterStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ParameterBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterBooleanItemProvider parameterBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ParameterBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterBooleanAdapter() {
		if (parameterBooleanItemProvider == null) {
			parameterBooleanItemProvider = new ParameterBooleanItemProvider(this);
		}

		return parameterBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.ParameterList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterListItemProvider parameterListItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.ParameterList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterListAdapter() {
		if (parameterListItemProvider == null) {
			parameterListItemProvider = new ParameterListItemProvider(this);
		}

		return parameterListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link atomicDevs.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link atomicDevs.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (atomicDEVSItemProvider != null)
			atomicDEVSItemProvider.dispose();
		if (stateStructureItemProvider != null)
			stateStructureItemProvider.dispose();
		if (phaseVariableItemProvider != null)
			phaseVariableItemProvider.dispose();
		if (sigmaVariableItemProvider != null)
			sigmaVariableItemProvider.dispose();
		if (customVariableItemProvider != null)
			customVariableItemProvider.dispose();
		if (typeItemProvider != null)
			typeItemProvider.dispose();
		if (statePhaseItemProvider != null)
			statePhaseItemProvider.dispose();
		if (primitiveTypeItemProvider != null)
			primitiveTypeItemProvider.dispose();
		if (userDefinedTypeItemProvider != null)
			userDefinedTypeItemProvider.dispose();
		if (internalTransitionDataItemProvider != null)
			internalTransitionDataItemProvider.dispose();
		if (initialStateItemProvider != null)
			initialStateItemProvider.dispose();
		if (stateDoubleItemProvider != null)
			stateDoubleItemProvider.dispose();
		if (stateStringItemProvider != null)
			stateStringItemProvider.dispose();
		if (stateBooleanItemProvider != null)
			stateBooleanItemProvider.dispose();
		if (stateUserDefinedItemProvider != null)
			stateUserDefinedItemProvider.dispose();
		if (stateIntegerItemProvider != null)
			stateIntegerItemProvider.dispose();
		if (infinityItemProvider != null)
			infinityItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (internalTransitionItemProvider != null)
			internalTransitionItemProvider.dispose();
		if (externalTransitionItemProvider != null)
			externalTransitionItemProvider.dispose();
		if (externalTransitionDataItemProvider != null)
			externalTransitionDataItemProvider.dispose();
		if (portItemProvider != null)
			portItemProvider.dispose();
		if (outputItemProvider != null)
			outputItemProvider.dispose();
		if (inputItemProvider != null)
			inputItemProvider.dispose();
		if (outputPortItemProvider != null)
			outputPortItemProvider.dispose();
		if (inputPortItemProvider != null)
			inputPortItemProvider.dispose();
		if (valueDataItemProvider != null)
			valueDataItemProvider.dispose();
		if (initialDotItemProvider != null)
			initialDotItemProvider.dispose();
		if (parameterUserDefinedItemProvider != null)
			parameterUserDefinedItemProvider.dispose();
		if (parameterIntegerItemProvider != null)
			parameterIntegerItemProvider.dispose();
		if (parameterDoubleItemProvider != null)
			parameterDoubleItemProvider.dispose();
		if (parameterStringItemProvider != null)
			parameterStringItemProvider.dispose();
		if (parameterBooleanItemProvider != null)
			parameterBooleanItemProvider.dispose();
		if (parameterListItemProvider != null)
			parameterListItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
	}

}
